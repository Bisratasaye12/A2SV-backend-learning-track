// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "Task-8/Domain"

	mock "github.com/stretchr/testify/mock"
)

// Infrastructure is an autogenerated mock type for the Infrastructure type
type Infrastructure struct {
	mock.Mock
}

// AuthMiddleware provides a mock function with given fields: requiredRoles
func (_m *Infrastructure) AuthMiddleware(requiredRoles ...string) interface{} {
	_va := make([]interface{}, len(requiredRoles))
	for _i := range requiredRoles {
		_va[_i] = requiredRoles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthMiddleware")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(...string) interface{}); ok {
		r0 = rf(requiredRoles...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EncryptPassword provides a mock function with given fields: password
func (_m *Infrastructure) EncryptPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for EncryptPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWT_Auth provides a mock function with given fields: existingUser, user
func (_m *Infrastructure) JWT_Auth(existingUser *domain.User, user *domain.User) (string, error) {
	ret := _m.Called(existingUser, user)

	if len(ret) == 0 {
		panic("no return value specified for JWT_Auth")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, *domain.User) (string, error)); ok {
		return rf(existingUser, user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, *domain.User) string); ok {
		r0 = rf(existingUser, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, *domain.User) error); ok {
		r1 = rf(existingUser, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInfrastructure creates a new instance of Infrastructure. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInfrastructure(t interface {
	mock.TestingT
	Cleanup(func())
}) *Infrastructure {
	mock := &Infrastructure{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
